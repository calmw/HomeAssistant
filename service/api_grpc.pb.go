// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/api.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Api_Ha_FullMethodName = "/Api/Ha"
)

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	Ha(ctx context.Context, opts ...grpc.CallOption) (Api_HaClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Ha(ctx context.Context, opts ...grpc.CallOption) (Api_HaClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[0], Api_Ha_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiHaClient{stream}
	return x, nil
}

type Api_HaClient interface {
	Send(*RequestHa) error
	Recv() (*HaReply, error)
	grpc.ClientStream
}

type apiHaClient struct {
	grpc.ClientStream
}

func (x *apiHaClient) Send(m *RequestHa) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiHaClient) Recv() (*HaReply, error) {
	m := new(HaReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	Ha(Api_HaServer) error
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) Ha(Api_HaServer) error {
	return status.Errorf(codes.Unimplemented, "method Ha not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_Ha_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).Ha(&apiHaServer{stream})
}

type Api_HaServer interface {
	Send(*HaReply) error
	Recv() (*RequestHa, error)
	grpc.ServerStream
}

type apiHaServer struct {
	grpc.ServerStream
}

func (x *apiHaServer) Send(m *HaReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiHaServer) Recv() (*RequestHa, error) {
	m := new(RequestHa)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Api",
	HandlerType: (*ApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ha",
			Handler:       _Api_Ha_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
